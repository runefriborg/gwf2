#!/usr/bin/env python

import os
import sys
import argparse
import logging

from gwf.parser import parse
from gwf.dependency_graph import DependencyGraph
from gwf.task_scheduler import TaskScheduler
from gwf.process_scheduler import ProcessScheduler
from gwf.reporting import FileReporter

from gwf.environment import get_environment

parser = argparse.ArgumentParser(description='Run a workflow locally.')

parser.add_argument('-f', '--file',
                    default='workflow.gwf', dest='workflow_file',
                    help='workflow file if not the default (workflow.gwf).')

group = parser.add_mutually_exclusive_group()

group.add_argument('-a', '--all', default=False, action='store_true',
                   help='run all end targets in the workflow')
group.add_argument('-t', '--targets', nargs='+',
                   help='the target(s) to process.')

args = parser.parse_args()

# parse workflow file
workflow = parse(os.path.join(os.getcwd(), args.workflow_file))

# If all end targets should be run, we have to figure out what those
# are and set the target names in the workflow.
if args.all:
    graph = DependencyGraph(workflow)
    workflow.target_names = frozenset(node.task.name
                                      for node in graph.end_targets)
else:
    workflow.target_names = args.targets
    # check if all targets that we wish to run have been defined in the
    # workflow.
    for target in workflow.target_names:
        if target not in workflow.targets:
            print >> sys.stderr, 'target %s not found in workflow.' % target
            sys.exit(1)

# get a suitable environment for this workflow instance.
environment = get_environment()
logging.debug(environment)

# initialize file reporter such that it writes the log file to local
# storage (scratch) until the reporter is finalized.
local_dir = environment.scratch_dir
shared_dir = os.path.join(environment.config_dir, 'jobs', environment.job_id)

reporter = FileReporter(tmp_dir=local_dir, final_dir=shared_dir)

# initialize a scheduler for the workflow and start the run loop.
scheduler = TaskScheduler(environment,
                          reporter,
                          workflow,
                          ProcessScheduler())
scheduler.run()
